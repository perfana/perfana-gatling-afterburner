<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

   

    <groupId>io.perfana</groupId>
    <artifactId>gatling-afterburner</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
 
        <encoding>UTF-8</encoding>

        <!-- dependency versioning -->
        <gatling.version>3.3.1</gatling.version>
        <events-gatling-maven-plugin.version>3.0.3-events-7</events-gatling-maven-plugin.version>
        <perfana-java-client.version>1.4.1</perfana-java-client.version>
        <test-events-wiremock.version>1.1.1</test-events-wiremock.version>

        <!-- Perfana url  -->
        <perfanaUrl>http://perfana:3000</perfanaUrl>

        <!-- Default Simulation class  -->
        <systemUnderTestSimulation>io.perfana.afterburner.gatling.setup.Afterburner</systemUnderTestSimulation>

        <!-- By default Jenkins build Url is used -->
        <CIBuildResultsUrl>${BUILD_URL}</CIBuildResultsUrl>

        <!-- By default no proxy is used -->
        <useProxy>false</useProxy>

        <!-- By default debugmode is off -->
        <debug>false</debug>

        <!-- Default graphite namespace -->
        <graphitePrefix>gatling2.debug</graphitePrefix>

        <!-- Default scenario -->
        <scenario>acceptance</scenario>

        <!-- Hostname for using in gatling.data.graphite.rootPreFix when running distributed test on Linux injectors-->
        <hostname>${env.INJECTOR}</hostname>

        <!-- By default the scripts runs as master -->
        <isMasterScript>true</isMasterScript>

        <!-- By default don't send data to perfana -->
        <perfanaEnabled>true</perfanaEnabled>

        <!-- By default don't assert test results -->
        <assertResultsEnabled>false</assertResultsEnabled>

        <!-- By default disable events -->
        <eventsEnabled>false</eventsEnabled>
        <eventScheduleScript></eventScheduleScript>

        <!-- Default load settings -->
        <initialUsersPerSecond>1</initialUsersPerSecond>
        <targetUsersPerSecond>1</targetUsersPerSecond>
        <rampupTimeInSeconds>60</rampupTimeInSeconds>
        <constantLoadTimeInSeconds>900</constantLoadTimeInSeconds>

        <!-- Settings for the Perfana Dashboard -->
        <systemUnderTest>Afterburner</systemUnderTest>
        <version>1.0</version>
        <tags></tags>
        
    </properties>

    <dependencyManagement>

        <dependencies>
            <dependency>
                <groupId>io.gatling.highcharts</groupId>
                <artifactId>gatling-charts-highcharts</artifactId>
                <version>${gatling.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>io.gatling.highcharts</groupId>
            <artifactId>gatling-charts-highcharts</artifactId>
        </dependency>
    </dependencies>

    <build>
        <testSourceDirectory>src/test/scala</testSourceDirectory>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
                <plugin>
                    <groupId>nl.stokpop</groupId>
                    <artifactId>events-gatling-maven-plugin</artifactId>
                    <version>${events-gatling-maven-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>1.10</version>
                <executions>
                    <execution>
                        <id>timestamp-property</id>
                        <goals>
                            <goal>timestamp-property</goal>
                        </goals>
                        <configuration>
                            <name>build.time</name>
                            <pattern>yyyyMMdd-HHmmss</pattern>
                            <timeZone>CET</timeZone>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>nl.stokpop</groupId>
                <artifactId>events-gatling-maven-plugin</artifactId>
                <configuration>
                    <dataFolder>src/test/resources/data</dataFolder>
                    <resultsFolder>target/gatling/results</resultsFolder>
                    <bodiesFolder>src/test/resources/request-bodies</bodiesFolder>
                    <simulationsFolder>src/test/scala</simulationsFolder>
                    <noReports>true</noReports>
                    <simulationClass>${systemUnderTestSimulation}</simulationClass>

                    <eventDebugEnabled>true</eventDebugEnabled>
                    <eventSystemUnderTest>${systemUnderTest}</eventSystemUnderTest>
                    <eventVersion>${version}</eventVersion>
                    <eventWorkload>${workload}</eventWorkload>
                    <eventTestEnvironment>${testEnvironment}</eventTestEnvironment>
                    <eventTestRunId>${testRunId}</eventTestRunId>
                    <eventBuildResultsUrl>${CIBuildResultsUrl}</eventBuildResultsUrl>
                    <eventRampupTimeInSeconds>${rampupTimeInSeconds}</eventRampupTimeInSeconds>
                    <eventConstantLoadTimeInSeconds>${constantLoadTimeInSeconds}</eventConstantLoadTimeInSeconds>
                    <eventVariables>
                        <property>
                            <name>$service</name>
                            <value>afterburner</value>
                        </property>
                    </eventVariables>
                    <eventTags>${tags}</eventTags>
                    <eventScheduleScript>
                        ${eventScheduleScript}
                    </eventScheduleScript>
                    <events>
                    <!-- here you can define events, with own properties per event,
                         so you can form instance create two wiremock events with different wiremockUrls for example -->
                    <MyWireMockEvent>
                        <eventFactory>nl.stokpop.event.wiremock.WiremockEventFactory</eventFactory>
                        <enabled>${eventsEnabled}</enabled>
                        <wiremockFilesDir>src/test/resources/wiremock</wiremockFilesDir>
                        <wiremockUrl>http://wiremock:8080</wiremockUrl>
                    </MyWireMockEvent>
                    <MyPerfanaEvent>
                        <eventFactory>io.perfana.event.PerfanaEventFactory</eventFactory>
                        <enabled>true</enabled>
                        <perfanaUrl>${perfanaUrl}</perfanaUrl>
                    </MyPerfanaEvent>
                </events>
                    <jvmArgs>
                        <jvmArg>-Dscenario=${scenario}</jvmArg>
                        <jvmArg>-DtestRunId=${testRunId}</jvmArg>
                        <jvmArg>-DtargetBaseUrl=${targetBaseUrl}</jvmArg>
                        <jvmArg>-DinitialUsersPerSecond=${initialUsersPerSecond}</jvmArg>
                        <jvmArg>-DtargetUsersPerSecond=${targetUsersPerSecond}</jvmArg>
                        <jvmArg>-DrampupTimeInSeconds=${rampupTimeInSeconds}</jvmArg>
                        <jvmArg>-DconstantLoadTimeInSeconds=${constantLoadTimeInSeconds}</jvmArg>
                        <jvmArg>-Ddebug=${debug}</jvmArg>
                        <jvmArg>-DuseProxy=${useProxy}</jvmArg>
                        <jvmArg>-Dgatling.data.graphite.rootPathPrefix=gatling2.${systemUnderTest}.${testEnvironment}</jvmArg>
                        <jvmArg>-Xms1g</jvmArg>
                        <jvmArg>-Xmx4g</jvmArg>
                    </jvmArgs>
                    <propagateSystemProperties>false</propagateSystemProperties>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>nl.stokpop</groupId>
                        <artifactId>test-events-wiremock</artifactId>
                        <version>${test-events-wiremock.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>io.perfana</groupId>
                        <artifactId>perfana-java-client</artifactId>
                        <version>${perfana-java-client.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>

    </build>


    <!-- ************************************************************************ ==
    == Below we have defined three sets of profiles, which control the type of    ==
    == test that will be run and the targeted testEnvironment.                        ==
    == If you wish to run a stress test on acceptance, use:                       ==
    == mvn perfana-gatling:integration-test -Ptest-type-stress,test-env-acc       ==
    == ************************************************************************ -->

    <profiles>

        <!-- Test testEnvironment profiles -->

        <profile>
            <id>test-env-local</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <targetBaseUrl>http://localhost:8080</targetBaseUrl>
                <testEnvironment>local</testEnvironment>
            </properties>
        </profile>

        <profile>
            <id>test-env-tst</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <targetBaseUrl>https://tst.example.com</targetBaseUrl>
                <testEnvironment>tst</testEnvironment>
            </properties>
        </profile>


        <profile>
            <id>test-env-acc</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <targetBaseUrl>http://afterburner:8080</targetBaseUrl>
                <testEnvironment>acc</testEnvironment>
            </properties>
        </profile>

        <profile>
            <id>test-env-demo</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <targetBaseUrl>http://afterburner-fe:8080</targetBaseUrl>
                <testEnvironment>acc</testEnvironment>
            </properties>
        </profile>


        <!-- Test type profiles -->

        <profile>
            <id>test-type-stress</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <workload>stressTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>30</targetUsersPerSecond>
                <rampupTimeInSeconds>1800</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>1</constantLoadTimeInSeconds>
                <perfanaEnabled>true</perfanaEnabled>
                <testRunId>${systemUnderTest}-${version}-${workload}-${testEnvironment}-${build.time}</testRunId>
                <graphitePrefix>gatling2</graphitePrefix>
                <tags>stress-test</tags>
            </properties>
        </profile>

        <profile>
            <id>test-type-load</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <workload>loadTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>2</targetUsersPerSecond>
                <rampupTimeInSeconds>30</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>240</constantLoadTimeInSeconds>
                <perfanaEnabled>true</perfanaEnabled>
                <testRunId>${systemUnderTest}-${version}-${workload}-${testEnvironment}-${build.timestamp}</testRunId>
                <graphitePrefix>gatling2</graphitePrefix>
                <eventsEnabled>true</eventsEnabled>
                <eventScheduleScript>
                    PT0S|wiremock-change-delay(delay=400)|delay=400
                </eventScheduleScript>
                <tags>load-test</tags>
            </properties>
        </profile>

        <profile>
            <id>test-type-slow-backend</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <workload>slowBackendTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>2</targetUsersPerSecond>
                <rampupTimeInSeconds>60</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>300</constantLoadTimeInSeconds>
                <perfanaEnabled>true</perfanaEnabled>
                <testRunId>${systemUnderTest}-${version}-${workload}-${testEnvironment}-${build.timestamp}</testRunId>
                <graphitePrefix>gatling2</graphitePrefix>
                <eventsEnabled>true</eventsEnabled>
                <eventScheduleScript>
                    PT0S|wiremock-change-delay(delay=400)|delay=400
                    PT1M|wiremock-change-delay(delay=2000)|delay=2000
                    PT2M|wiremock-change-delay(delay=4000)|delay=4000
                    PT3M|wiremock-change-delay(delay=8000)|delay=8000
                    PT4M|wiremock-change-delay(delay=12000)|delay=12000
                    PT5M|wiremock-change-delay(delay=400)|delay=400
                </eventScheduleScript>
                <tags>load-test,perfana-demo-host</tags>
            </properties>
        </profile>

        <profile>
            <id>test-type-endurance</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <workload>enduranceTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>60</targetUsersPerSecond>
                <rampupTimeInSeconds>900</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>172800</constantLoadTimeInSeconds>
                <perfanaEnabled>true</perfanaEnabled>
                <testRunId>${systemUnderTest}-${version}-${workload}-${testEnvironment}-${build.time}</testRunId>
                <graphitePrefix>gatling2</graphitePrefix>
            </properties>
        </profile>

        <profile>
            <id>test-type-nightly</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <workload>nightlyLoadTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>40</targetUsersPerSecond>
                <rampupTimeInSeconds>600</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>3600</constantLoadTimeInSeconds>
                <perfanaEnabled>true</perfanaEnabled>
                <assertResultsEnabled>true</assertResultsEnabled>
                <testRunId>${systemUnderTest}-${version}-${workload}-${testEnvironment}-${build.time}</testRunId>
                <graphitePrefix>gatling2.nightly</graphitePrefix>
            </properties>
        </profile>

        <!-- Scenarios-->

        <profile>
            <id>acceptance</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <scenario>acceptance</scenario>
            </properties>
        </profile>




        <!-- This profile can be used to run the script in debug mode. This results in running the "debug" scenario and results are pushed to debug namespace in Graphite  -->
        <profile>
            <id>debug</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <debug>true</debug>
                <graphitePrefix>gatling2.debug</graphitePrefix>
                <scenario>debug</scenario>
            </properties>
        </profile>


        <!-- This profile can be used to route the traffic through a proxy for debugging  -->
        <profile>
            <id>proxy</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <useProxy>true</useProxy>
            </properties>
        </profile>



        <!-- This profile can be used to trigger the assertions  to assert test run results from the pipeline   -->
        <profile>
            <id>assert-results</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <assertResultsEnabled>true</assertResultsEnabled>
            </properties>
        </profile>

        <!-- This profile can be used in a distributed test -->
        <profile>
            <id>distributed-test</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <graphitePrefix>gatling2.${hostname}</graphitePrefix>
            </properties>
        </profile>

        <!-- This profile can be used to set the script as slave script in a distributed test -->
        <profile>
            <id>is-slave-script</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <perfanaEnabled>false</perfanaEnabled>
            </properties>
        </profile>

    </profiles>
</project>
